"""Add new tables for Granjas del Carmen

Revision ID: 9ba07a6aa16d
Revises: 
Create Date: 2025-10-17 16:19:04.693141

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9ba07a6aa16d'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Only add new tables, don't drop existing ones
    op.create_table('products',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('stock', sa.Integer(), nullable=True),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('image_url', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('orders',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('total_amount', sa.Float(), nullable=False),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('shipping_address', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('order_items',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('order_id', sa.String(), nullable=False),
    sa.Column('product_id', sa.String(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # Add new columns to existing users table
    op.add_column('users', sa.Column('phone', sa.String(), nullable=True))
    op.add_column('users', sa.Column('address', sa.Text(), nullable=True))
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'is_active')
    op.drop_column('users', 'address')
    op.drop_column('users', 'phone')
    op.create_table('Client',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('Client_pkey'))
    )
    op.create_index(op.f('Client_email_key'), 'Client', ['email'], unique=True)
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('_prisma_migrations_pkey'))
    )
    op.create_table('VerificationToken',
    sa.Column('identifier', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False)
    )
    op.create_index(op.f('VerificationToken_token_key'), 'VerificationToken', ['token'], unique=True)
    op.create_index(op.f('VerificationToken_identifier_token_key'), 'VerificationToken', ['identifier', 'token'], unique=True)
    op.create_table('Account',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('providerAccountId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('token_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('scope', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('session_state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name=op.f('Account_userId_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('Account_pkey'))
    )
    op.create_index(op.f('Account_provider_providerAccountId_key'), 'Account', ['provider', 'providerAccountId'], unique=True)
    op.create_table('test_table',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('test_table_pkey'))
    )
    op.create_table('Session',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('sessionToken', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name=op.f('Session_userId_fkey'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('Session_pkey'))
    )
    op.create_index(op.f('Session_sessionToken_key'), 'Session', ['sessionToken'], unique=True)
    op.create_table('Shopping',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('item', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('purchaseDate', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('cantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('unityValue', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('totalValue', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name=op.f('Shopping_userId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('Shopping_pkey'))
    )
    op.create_table('Rabbit',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('birthDate', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('gender', postgresql.ENUM('MALE', 'FEMALE', name='Gender'), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updatedAt', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('userId', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['User.id'], name=op.f('Rabbit_userId_fkey'), onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('Rabbit_pkey'))
    )
    op.create_table('User',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('emailVerified', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('role', postgresql.ENUM('USER', 'CLIENT', 'ADMIN', name='Role'), server_default=sa.text('\'USER\'::"Role"'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('User_pkey'))
    )
    op.create_index(op.f('User_email_key'), 'User', ['email'], unique=True)
    op.drop_table('order_items')
    op.drop_table('orders')
    op.drop_table('products')
    # ### end Alembic commands ###
